<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.seojoo21.mapper.BoardMapper">

<!-- 검색 조건 SQL문 별도 저장 -->
<sql id="criteria">
   <trim prefix="(" suffix=") AND " prefixOverrides="OR">
        <foreach item='type' collection="typeArr">
            <trim prefix="OR">
                <choose>
                    <when test="type=='T'.toString()">
                        title like '%'||#{keyword}||'%'
                    </when>
                    <when test="type=='C'.toString()">
                        content like '%'||#{keyword}||'%'
                    </when>
                    <when test="type=='W'.toString()">
                        writer like '%'||#{keyword}||'%'
                    </when>
                </choose>
            </trim>
        </foreach>
    </trim>
</sql>

<!-- 1. 게시물 전체를 읽어온다.  -->
<select id="getList" resultType="com.seojoo21.domain.BoardVO">
<![CDATA[
select * from tbl_board where bno > 0
]]>
</select>

<!-- 2. 게시물을 생성한다(Create) -->
<insert id="create">
	<selectKey keyProperty="bno" order="BEFORE" resultType="long" >
	select seq_board.nextval from dual
	</selectKey>
	
	insert into tbl_board (bno, title, content, writer, userid)
	values (#{bno}, #{title}, #{content}, #{writer}, #{userid})

</insert>

<!-- 3. 특정 게시물을 조회한다.(Read) -->
<select id="read" resultType="com.seojoo21.domain.BoardVO">
	select * from tbl_board where bno = #{bno}
</select>

<!-- 4. 특정 게시물을 수정한다. (Update) -->
<update id="update">
	update tbl_board
	set title = #{title},
	content = #{content},
	writer = #{writer},
	userid = #{userid},
	updateDate = sysdate
	where bno = #{bno}
</update>

<!-- 5. 특정 게시물을 삭제한다. (Delete)  -->
<delete id="delete">
	delete from tbl_board where bno = #{bno}
</delete>

<!-- 6. 특정 게시물의 조회수를 올린다.  -->
<update id="viewHit">
	update tbl_board 
	set viewHit = viewHit + 1
	where bno = #{bno} 
</update>

<!-- 7. 특정 게시물의 추천수를 가져온다.  -->
<update id="updateLikeHit">
	update tbl_board 
	set likehit = likehit + #{amount }
	where bno = #{bno } 
</update> 

<!-- 8. 페이징 및 검색 처리를 하여 게시물 전체를 읽어온다.  -->
<select id="getListWithPaging" resultType="com.seojoo21.domain.BoardVO">
<![CDATA[
	select bno, title, content, writer, regdate, updatedate, viewhit, likehit, replycnt
	from
	(
		select /*+index_desc(tbl_board pk_board)*/
		rownum as rn, bno, title, content, writer, regdate, updatedate, viewhit, likehit, replycnt
		from tbl_board
		where ]]> 
		
<include refid="criteria"></include>

<![CDATA[
        rownum <= #{pageNum} * #{amount}
	)
	where rn > (#{pageNum}-1) * #{amount}
]]>
</select>

<!-- 9. 전체 게시물의 개수를 구한다. -->
<select id="getTotalCount" resultType="int">
	select count(*) from tbl_board where bno > 0
</select>

<!-- 10. 댓글 수를 업데이트 한다. (게시물 제목 옆에 댓글 수가 자동으로 뜨도록 하기 위함)  -->
<update id="updateReplyCnt">
	update tbl_board set replycnt = replycnt + #{amount } where bno = #{bno }
</update>

<!-- 11. 최신 게시물을 가져온다. -->
<select id="getRecentList" resultType="com.seojoo21.domain.BoardVO">
<![CDATA[
	select /*+index_desc(tbl_board pk_board)*/ bno, title, writer, regdate from tbl_board where rownum <= #{amount } 
]]>
</select>

<!-- 12. 인기 게시물을 가져온다. -->
<select id="getLikeHitList" resultType="com.seojoo21.domain.BoardVO">
<![CDATA[
	select bno, title, writer, likehit, viewhit
	from
	(select /*+index_desc(tbl_board idx_board_like)*/ 
	bno, title, writer, likehit, viewhit from tbl_board)
	where rownum <= #{amount }
]]>
</select>

</mapper>